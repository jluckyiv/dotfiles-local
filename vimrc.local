" ---------------------------
" Appearance }}}1
" ---------------------------
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

colo gruvbox
highlight SignColumn ctermbg=black

" ---------------------------
" Global settings {{{1
" ---------------------------
if has('mouse')
  set mouse=nv
endif

" set tags=./tags;         " Set the tag file search order
set background=dark      " Make it easier on the eyes
set backupdir=~/.tmp     " Don't clutter my dirs with backup files
set completeopt=longest,menuone
set directory=~/.tmp     " Don't clutter my dirs up with swp and tmp files
set exrc                 " Load local .vimrc or .nvimrc
set fillchars+=vert:\ 
set foldlevelstart=99    " Start with all folds open
set formatoptions-=or    " Don't add the comment prefix when I hit enter or o/O on a comment line.
set gdefault             " Assume the /g flag on :s substitutions to replace all matches in a line
set hidden               " Allow switching from a modified buffer without saving
set history=5000         " Save lots of history
set hlsearch             " Also switch on highlighting the last used search pattern.
set ignorecase smartcase " Ignore case in searches, unless there's an uppercase latter
set iskeyword-=_         " Use _ as a word-separator
set noesckeys            " Recognize <esc> immediately
set nowrap               " Don't wrap lines
set relativenumber       " Use relative numbers
set secure               " Prevent shell and write commands in local .vimrc
set timeoutlen=500       " Don't wait so long for the next keypress (particularly in ambigious leader situations.
set viminfo+=!
set winminheight=0       " Minimum height of out-of-focus window

" ---------------------------
" Plugin configuration {{{1
" ---------------------------

" neomake {{{2
if exists(':Neomake')
  " Run NeoMake on read and write operations
  autocmd! BufReadPost,BufWritePost * Neomake

  " Disable inherited syntastic
  let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": [] }

  let g:neomake_serialize = 1
  let g:neomake_serialize_abort_on_error = 1
endif


" elm autoformat {{{3
let g:polyglot_disabled = ['elm']
let g:elm_format_autosave = 1
let g:elm_detailed_complete = 1
let g:elm_syntastic_show_warnings = 1

" ctrl-p {{{2
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore "**/*.pyc"
      \ --ignore "**/*.swo"
      \ --ignore "**/*.swp"
      \ --ignore .DS_Store
      \ --ignore .git
      \ --ignore .hg
      \ --ignore .svn
      \ --ignore .vagrant
      \ --ignore _build
      \ --ignore bower_components
      \ --ignore deps
      \ --ignore elm-stuff
      \ --ignore node_modules
      \ --ignore tmp
      \ --ignore vcr_cassettes
      \ -g ""'

" gitgutter {{{2
let g:gitgutter_max_signs = 600

" syntastic {{{2
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:airline#extensions#syntastic#enabled = 0

" vim-markdown {{{2
let g:markdown_fenced_languages = ['css', 'elm', 'elixir', 'eex=elixir', 'erb=ruby', 'javascript', 'js=javascript', 'ruby', 'sass', 'xml']

" vim-marked {{{2
let g:marked_app = "Marked 2"

" vim-ragtag {{{2
let g:ragtag_global_maps = 1

" vim-ruby {{{2
let ruby_fold=1

" vim-test {{{2
if has('nvim')
  let test#strategy = "neovim"
else
  let test#strategy = "dispatch"
endif

" ---------------------------
" Filetypes }}}1
" ---------------------------

augroup myfiletypes
  autocmd!
  autocmd FileType vim setl keywordprg=:help " Enable lookup in .vimrc
  autocmd FileType elixir,ruby,eruby,yaml setlocal autoindent shiftwidth=2 softtabstop=2 expandtab list
  autocmd FileType elixir,ruby,eruby,yaml setlocal path+=lib
  autocmd FileType markdown,text setlocal wrap lbr nolist spell
  autocmd FileType markdown,text setlocal softtabstop=4 tabstop=4 shiftwidth=4 textwidth=0
  autocmd BufReadPost,BufWritePost *.elm ElmMake

  " Remove trailing whitespace on save for ruby files.
  autocmd BufWritePre *.rb :%s/\s\+$//e
augroup END

" ---------------------------
" Mappings {{{1
" ---------------------------
" Fix the & command in normal+visual modes {{{2
nnoremap & :&&<Enter>
xnoremap & :&&<Enter>

" General {{{2
cnoremap <expr> %%  getcmdtype() == ':' ? fnameescape(expand('%:h')).'/' : '%%'

inoremap <Tab> <c-p>
inoremap <c-a> <c-o>^
inoremap <c-e> <c-o>$

nnoremap <silent> <Leader>T :TestFile<CR>
nnoremap _$ :call Preserve("%s/\\s\\+$//e")<cr>
nnoremap j gj
nnoremap k gk

noremap <c-n> :cn<cr>
noremap <c-p> :cp<cr>
noremap <c-t> <esc>:tabnew<cr>
noremap <c-x> <c-w>c
noremap <leader>$ :call Preserve("%s/\\s\\+$//e")<cr>
noremap <leader>/ :nohl<cr>
noremap <leader>bb :!bundle install<cr>
noremap <leader>bi :tabe ~/.vimrc.bundles.local<cr>
noremap <leader>bs :source ~/.vimrc.bundles.local<cr>
noremap <leader>cc :!cucumber --drb %<cr>
noremap <leader>co ggVG"*y
noremap <leader>cu :Tabularize /\|<cr>
noremap <leader>dr :e ~/Dropbox<cr>
noremap <leader>e :e <c-r>=expand("%:p:h") . '/'<cr>
noremap <leader>ec :e ~/code/
noremap <leader>er :e <c-r>=expand("%:r")."."<cr>
noremap <leader>es :sp %%
noremap <leader>et :tabe %%
noremap <leader>ev :vsp %%
noremap <leader>ew :e %%
noremap <leader>fix :cnorenoremap % %<cr>
noremap <leader>gac :Gcommit -m -a ""<left>
noremap <leader>gc :Gcommit -m ""<left>
noremap <leader>gs :Gstatus<cr>
noremap <leader>gw :!git add . && git commit -m 'WIP' && git push<cr>
noremap <leader>i mmgg=G`m<cr>
noremap <leader>p :set paste<cr>o<esc>"*]p:set nopaste<cr>
noremap <leader>ra :%s/
noremap <leader>rd :!bundle exec rspec % --format documentation<cr>
noremap <leader>rs :vsp <c-r>#<cr><c-w>w
noremap <leader>rt q:?!ruby<cr><cr>
noremap <leader>rw :%s/\s\+$//<cr>:w<cr>
noremap <leader>rx :w<cr>:ruby %:p<cr>
noremap <leader>s :split <c-r>=expand("%:p:h") . '/'<cr>
noremap <leader>sg :sp<cr>:grep
noremap <leader>so :so %<cr>
noremap <leader>sp yss<p>
noremap <leader>sq j<c-v>}klllcs<esc>:wq<cr>
noremap <leader>ss ds)i <esc>:w<cr>
noremap <leader>v :vnew <c-r>=expand("%:p:h") . '/'<cr>
noremap <leader>vg :vsp<cr>:grep
noremap <leader>vi :tabe ~/.vimrc.local<cr>
noremap <leader>vs :source ~/.vimrc.local<cr>
noremap <leader>w <c-w>w
noremap <leader>x :exec getline(".")<cr>
vnoremap <c-c> :w !pbcopy<cr><cr>
vnoremap <c-x> :!pbcopy<cr>
vnoremap <leader>b :<c-u>!git blame <c-r>=expand("%:p") <cr> \| sed -n <c-r>=line("'<") <cr>,<c-r>=line("'>") <cr>p <cr>
vnoremap <leader>bed "td?describe<cr>obed<tab><esc>"tpkdd/end<cr>o<esc>:nohl<cr>
xnoremap . :normal .<cr>
xnoremap @ :<c-u>call ExecuteMacroOverVisualRange()<cr>

" ---------------------------
" Functions {{{1
" ---------------------------

" Strip trailing whitespace {{{2
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Visual line repeat {{{2
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

command! Q q " Bind :Q to :q

command! Qall qall

command! Path :call EchoPath()
function! EchoPath()
  echo join(split(&path, ","), "\n")
endfunction

command! TagFiles :call EchoTags()
function! EchoTags()
  echo join(split(&tags, ","), "\n")
endfunction

